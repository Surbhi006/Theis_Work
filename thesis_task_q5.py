# -*- coding: utf-8 -*-
"""Thesis_task_Q5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mpeJEbimU4cznUiNdSg7WZfTRTwNxzq5
"""

import json
import csv
from googletrans import Translator
from tqdm import tqdm
import numpy as np



#Generating number of tweets under a particular class
#A-->RIP
#B-->MissyouYuvi
#C-->Both
def getData():
    with open ('/content/drive/My Drive/Yuvi_RIP.json', encoding="utf8") as f:
        d = json.load(f)
        length = len(d)
        print(len(d))
    data = {'a':(0, 0), 'b':(0,0), 'c':(0,0)}
    filter_data = []
    for i in range(len(d)):
        y=0
        r=0
        for j in range(len(d[i]['entities']['hashtags'])):
            if(d[i]['entities']['hashtags'][j]['text']=='RestInPeace'):
                r=1
            if(d[i]['entities']['hashtags'][j]['text']=='MissYouYuvi'):
                y=1
        if(y==1 or r==1):
            new_instance = {'id':d[i]['_id'], 'verified':d[i]['user']['verified'], 
                            'hashtags': d[i]['entities']['hashtags'], 'metadata':d[i]['metadata'] ,
                            'loc': d[i]['user']['location'], 'created_at': d[i]['created_at'],'full_text':d[i]['full_text']}
            filter_data.append(new_instance) #Storing required Data
        if(y==1 and r==1):
            a, b = data['c']
            if(d[i]['user']['verified']):
                b+=1
            a+=1
            data['c']=(a,b)
        elif(y==1):
            a, b = data['b']
            if(d[i]['user']['verified']):
                b+=1
            a+=1
            data['b']=(a,b)
        elif(r==1):
            a, b = data['a']
            if(d[i]['user']['verified']):
                b+=1
            a+=1
            data['a']=(a,b)
    print(data)
    return filter_data

def convert_language(text):
  translator = Translator()
  translations = translator.translate(text,dest='en')
  return translations.text

import spacy
from spacy import displacy
from collections import Counter
import en_core_web_sm
nlp = en_core_web_sm.load()

def tweetLoc(data):
    doc = nlp(data)
    for X in doc.ents:
        if X.label_=="GPE":
             return X.text
    return None

pip install googletrans

def readCSV():
    data = []
    with open('/content/drive/My Drive/raw_data6.csv', 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            data.append(row)
    return data

from geopy.geocoders import Nominatim
def getState(location):
    geolocator = Nominatim(user_agent="test")
    try:
        state = geolocator.geocode(location, addressdetails=True)
        state = state.raw
        return state['address']['state']
    except:
        return ""

from scipy.stats.stats import pearsonr  
def getRelation(csv_data, filter_data):
    numbers = {}
    for i in tqdm(range(len(filter_data)-1,0,-1)):
        location = tweetLoc(convert_language(filter_data[i]['full_text']))
        if location==None:
            continue
        else:
            location = convert_language(getState(location))
            if(location==""):
                continue
            if(location not in numbers):
                 numbers[location]=1
            else:
                 numbers[location]+=1        
                 
    csv_numbers = {}
    for i in range(1, len(csv_data)):
        if csv_data[i][7]=='' or csv_data[i][7]==None:
            continue
        location = csv_data[i][7]
        num = int(csv_data[i][9])
        if(location not in csv_numbers):
            csv_numbers[location] = {'Recovered':0, 'Deceased':0, 'Infected':0}
            if(csv_data[i][10]=='Deceased'):
                csv_numbers[location]['Deceased']+=num
            elif(csv_data[i][10]=='Recovered'):
                csv_numbers[location]['Recovered']+=num
            else:
                csv_numbers[location]['Infected']+=num
        else:
            if(csv_data[i][10]=='Deceased'):
                csv_numbers[location]['Deceased']+=num
            elif(csv_data[i][10]=='Recovered'):
                csv_numbers[location]['Recovered']+=num
            else:
                csv_numbers[location]['Infected']+=num
    relation = {}
    x = []
    y=[]
    for i in csv_numbers:
        if i in numbers:
            x.append((csv_numbers[i]['Infected'], csv_numbers[i]['Deceased']))
            relation[i] = {"Cases":csv_numbers[i], "Tweets":numbers[i]}
            y.append((numbers[i],csv_numbers[i]['Deceased']))

    x = sorted(x)
    y = sorted(y)
    inf = []
    inf_y=[]
    dec = []
    dec_y = []
    for i in range(len(x)):
        inf.append(x[i][0])
        inf_y.append(y[i][0])
        dec.append(x[i][1])
        dec_y.append(y[i][1])
    inf = np.asarray(inf)
    inf_y = np.asarray(inf_y)
    dec = np.asarray(dec)
    dec_y = np.asarray(dec_y)
    print("Y",y)
    print("CoR: ", pearsonr(inf, dec))
    print("Cor Tweet",pearsonr(inf_y,dec_y))
    return relation, inf_y, dec_y

import matplotlib.pyplot as plt
def plot(inf, dec):
    plt.plot(inf, dec)
    plt.xlabel('Infected')
    plt.ylabel('Deceased')
    plt.show()

filter_data = getData()
csv_data = readCSV()
relation, inf, dec  = getRelation(csv_data, filter_data) 
plot(inf, dec) # number of deaths vs number of cases

#Number of Tweets vs number of deaths
plot(inf, dec)

relation, inf_y, dec_y  = getRelation(csv_data, filter_data)

#Tweet vs infected
plot(inf_y,dec_y)

